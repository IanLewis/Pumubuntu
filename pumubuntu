#!/usr/bin/env python

import gobject
import gtk
import appindicator
import pynotify
import json
import time
import threading
import platform
import os
import threading
import sys



#resources_dir = os.getcwd()
resources_dir = os.path.abspath(os.path.dirname(sys.argv[0]))
PREFERENCES_FILENAME = resources_dir + "prefs.json"
class Status():
    def __init__(self, notification_icon):
        self.current_status = Status.STOP
        self.pomodoro_stage = 0
        self.indicator = notification_icon

    def next(self):
        if (self.pomodoro_stage >= 4):
            self.current_status = Status.PAUSE
            self.pomodoro_stage = 0
        elif (self.current_status == Status.STOP or self.current_status == Status.PAUSE or self.current_status == Status.BREAK):
            self.current_status = Status.RUN
            self.pomodoro_stage += 1
        elif (self.current_status == Status.RUN):
            self.current_status = Status.BREAK
        self.notify()
        return self.current_status

    def stop(self):
        self.current_status = Status.STOP
        self.pomodoro_stage = 0 #we reset and start again. If a Pomodoro Begins, It Has to Ring
        self.notify()

    def isRunning(self):
        return self.current_status

    def getStage(self):
        return self.pomodoro_stage

    def notify(self):
        soundfile=resources_dir + "/audio/"
        iconfile=resources_dir + "/images/"
	if (self.current_status == self.STOP):
            soundfile += "stop.wav"
            iconfile += "flag-blue.png"
        elif (self.current_status == self.RUN):
            soundfile += "run.wav"
            iconfile += "flag-red.png"
        elif (self.current_status == self.BREAK):
            soundfile += "break.wav"
            iconfile += "flag-yellow.png"
        elif (self.current_status == self.PAUSE):
            soundfile += "pause.wav"
            iconfile += "flag-green.png"

        self.indicator.set_icon(iconfile)
        self.indicator.set_attention_icon(iconfile)

	if platform.system() == "Windows":
		from winsound import PlaySound, SND_FILENAME, SND_ASYNC
		PlaySound(soundfile, SND_FILENAME|SND_ASYNC)
	elif (platform.system() == "Linux"):
		from wave import open as waveOpen
		from ossaudiodev import open as ossOpen
		s = waveOpen(soundfile,'rb')
		(nc,sw,fr,nf,comptype, compname) = s.getparams( )
		dsp = ossOpen('/dev/dsp','w')
		try:
			from ossaudiodev import AFMT_S16_NE
		except ImportError:
			if byteorder == "little":
				AFMT_S16_NE = ossaudiodev.AFMT_S16_LE
			else:
				AFMT_S16_NE = ossaudiodev.AFMT_S16_BE
		dsp.setparameters(AFMT_S16_NE, nc, fr)
		data = s.readframes(nf)
		s.close()
		dsp.write(data)
		dsp.close()

    def getMinutes(self): #returns current status minutes
        prefs = Preferences()
	if (self.current_status == self.STOP):
            return 0 #minutes
        elif (self.current_status == self.RUN):
            return prefs.get_work_time()
        elif (self.current_status == self.BREAK):
            return prefs.get_short_break_time()
        elif (self.current_status == self.PAUSE):
            return prefs.get_long_break_time()

    STOP = 0
    RUN = 1
    BREAK = 2
    PAUSE = 3

class Timer():
	def __init__(self, status, text_label):
		self.thread = self.CountingThread(text_label, status)
		self.thread.daemon=True
		self.thread.event = threading.Event()
		self.thread.event.clear()
		self.thread.start()


	def isRunning(self):
		return self.thread.status.isRunning()

	def stop(self):
		print("Timer: stopped outside thread" + str(self.isRunning()))
		self.thread.event.clear() # pause thread
		self.thread.stop() # reset pomodoro

	def start(self):
		print("Timer: started outside thread" + str(self.isRunning()))
		self.thread.nextStage() # start new pomodoro (we were reset by the stop method. remember?)
		self.thread.event.set()  #run thread

	class CountingThread(threading.Thread):
		def __init__(self, text_label,status):
			threading.Thread.__init__(self)
			self.text_label = text_label
			self.status = status
			self.minutes = 0 #wait until someone tells us to start
			self.seconds = 0

		def stop(self):
			self.status.stop()
			print("CountingThread: stopped" + str(self.status.isRunning()))

		def nextStage(self):
			self.status.next() # next status and Play a sound! :D
			print("CountingThread: next stage" + str(self.status.isRunning()))

		def run(self):
			print("CountingThread: started...")
			while (True): #this thread is not restarted
				self.event.wait() # wait until we are allowed to run
				print("CountingThread: allowed to run...")
				if (self.status.isRunning()):
					# maybe we were stopped, so we have to update our timer!
					self.update_timer()
					while(not(self.minutes==0 and self.seconds==0) and self.status.isRunning()):
						time.sleep(1)
						self.text_label.set_text("%(minute)02d:%(second)02d" % \
										{"minute": self.minutes,"second": self.seconds})
						if(self.seconds == 0):
							self.seconds = 60
							self.minutes -= 1
						self.seconds -= 1
					# switch status
					self.switch_status();

		def update_timer(self):
			self.minutes = self.status.getMinutes()
			self.seconds = 0
		def switch_status(self):
			if (self.status.isRunning()):
                        	self.nextStage()
				print("CountingThread: finished..." + str(self.status.isRunning()))
			else:
				print("CountingThread: Pomodoro manually stopped. Status: " + str(self.status.isRunning()))

class Preferences():
	def __init__(self):
		self.KEY_WORK_TIME = "WT"
		self.KEY_LONG_BREAK_TIME = "LT"
		self.KEY_SHORT_BREAK_TIME = "ST"
		self.DEFAULT_WORK_TIME = 25
		self.DEFAULT_LONG_BREAK_TIME = 15
		self.DEFAULT_SHORT_BREAK_TIME = 5
		self.SAVED_WORK_TIME = 0
		self.SAVED_LONG_BREAK_TIME =0
		self.SAVED_SHORT_BREAK_TIME =0
		self.read_work_time()

	def save_preferences(self, work_time, short_break_time, long_break_time):
		obj = {self.KEY_WORK_TIME: work_time, self.KEY_SHORT_BREAK_TIME: short_break_time, self.KEY_LONG_BREAK_TIME: long_break_time}
		dump = json.dumps(obj)
		file = open(PREFERENCES_FILENAME, "w")
		file.write(dump)
		file.close()

	def read_work_time(self):
		try:
			file = open(PREFERENCES_FILENAME, "r")
			dump = json.loads(file.read())
			file.close()
			self.SAVED_WORK_TIME = dump[self.KEY_WORK_TIME]
			self.SAVED_LONG_BREAK_TIME = dump[self.KEY_LONG_BREAK_TIME]
			self.SAVED_SHORT_BREAK_TIME = dump[self.KEY_SHORT_BREAK_TIME]
		except IOError:
			self.SAVED_WORK_TIME = self.DEFAULT_WORK_TIME
			self.SAVED_LONG_BREAK_TIME = self.DEFAULT_LONG_BREAK_TIME
			self.SAVED_SHORT_BREAK_TIME = self.DEFAULT_SHORT_BREAK_TIME

	def get_work_time(self):
			return self.SAVED_WORK_TIME

	def get_long_break_time(self):

			return self.SAVED_LONG_BREAK_TIME

	def get_short_break_time(self):
			return self.SAVED_SHORT_BREAK_TIME

class OptionsWindow(gtk.Window):
	def __init__(self):
		gtk.Window.__init__(self)
		self.set_title("Pumubuntu") # TODO: Set an icon for this window...
		self.prefs = Preferences()
		self.main_box = gtk.VBox()
		self.box1 = gtk.HBox()
		self.label1 = gtk.Label("Work time (in minutes):")
		self.entry1 = gtk.Entry()
		self.entry1.set_text(str(self.prefs.get_work_time()))
		self.box1.add(self.label1)
		self.box1.add(self.entry1)
		self.main_box.add(self.box1)
		self.box2 = gtk.HBox()
		self.label2 = gtk.Label("Short break time (in minutes):")
		self.entry2 = gtk.Entry()
		self.entry2.set_text(str(self.prefs.get_short_break_time()))
		self.box2.add(self.label2)
		self.box2.add(self.entry2)
		self.main_box.add(self.box2)
		self.box3 = gtk.HBox()
		self.label3 = gtk.Label("Long break time (in minutes):")
		self.entry3 = gtk.Entry()
		self.entry3.set_text(str(self.prefs.get_long_break_time()))
		self.box3.add(self.label3)
		self.box3.add(self.entry3)
		self.main_box.add(self.box3)
		self.box4 = gtk.HBox()
		self.button1 = gtk.Button(stock=gtk.STOCK_SAVE)
		self.button1.connect("clicked", self.options_event, "save")
		self.button2 = gtk.Button(stock=gtk.STOCK_QUIT)
		self.button2.connect("clicked", self.options_event, "quit")
		self.box4.add(self.button1)
		self.box4.add(self.button2)
		self.main_box.add(self.box4) # TODO: Add a restore values buttom...
		self.add(self.main_box)

	def options_event(self, button, event):
		if(event == "save"):
			if(self.entry1.get_text() != "" and self.entry2.get_text() != "" and self.entry3.get_text() != ""):
				try:
					values = map(int, [ self.entry1.get_text(), self.entry2.get_text(), self.entry3.get_text()])
					self.prefs.save_preferences(values[0], values[1], values[2])
					self.destroy()
				except ValueError:
					dialog = gtk.MessageDialog(None, gtk.DIALOG_MODAL, gtk.MESSAGE_INFO, gtk.BUTTONS_NONE, "Please, just use entire numbers.")
					dialog.add_button(gtk.STOCK_CLOSE, gtk.RESPONSE_CLOSE)
					dialog.run()
					dialog.destroy()
		if(event == "quit"):
			self.destroy()



if __name__ == "__main__":
	# Ubuntu fix for hearing sound...
	if(platform.system() == "Linux" and len(sys.argv) == 1):
		(distname, ver, id) = platform.linux_distribution()
		if(distname == "Ubuntu"):
			os.system("padsp "+resources_dir+"/"+os.path.basename(sys.argv[0])+" -padsp &")
			exit()

	if not(pynotify.init("Pumubuntu")):
		prit("[!] Error: Could not load pynotify...")
		exit()

	def menu_event(menu_item, event):
		if(event == "play_pause"):
			if (timer.isRunning()):
				print("Menu: stopping thread" + str(timer.isRunning()))
				timer.stop()
			else:
				print("Menu: starting thread" + str(timer.isRunning()))
				timer.start()
		if(event == "exit"):
			gtk.main_quit()
		elif(event == "options"):
			OptionsWindow().show_all()

	
	gtk.gdk.threads_init()
	# Set an app indicator in system tray...
	ind = appindicator.Indicator("Pumubuntu", resources_dir + "/images/flag-blue.png", appindicator.CATEGORY_APPLICATION_STATUS) 
	ind.set_status (appindicator.STATUS_ACTIVE)
	ind.set_attention_icon(resources_dir + "/images/flag-blue.png")

	status = Status(ind) # we use this here and there
	# Indicator menu...
	menu = gtk.Menu()
	label_time = gtk.Label("00:00")
	menu_item = gtk.MenuItem()
	menu_item.add(label_time)
	menu_item.connect("activate", menu_event, "play_pause")
	menu_item.show()
	menu.append(menu_item)


	menu_item = gtk.ImageMenuItem(gtk.STOCK_PREFERENCES)
	menu_item.connect("activate", menu_event, "options")
	menu_item.show()
	menu.append(menu_item)
	menu_item = gtk.ImageMenuItem(gtk.STOCK_QUIT)
	menu_item.connect("activate", menu_event, "exit")
	menu_item.show()
	menu.append(menu_item)
	ind.set_menu(menu)

	timer = Timer(status, label_time)

	try:
		gtk.main()
	except KeyboardInterrupt:
		print("")
	exit()

